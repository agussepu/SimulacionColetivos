package presentacion;

import domain.Colectivo;
import domain.Parada;
import domain.Pasajero;
import java.io.FileNotFoundException;
import java.io.PrintStream;
import java.util.List;

/**
 * Clase encargada de mostrar los eventos y estados de la simulaci√≥n por consola.
 * Centraliza todos los mensajes de salida para separar la l√≥gica de presentaci√≥n del resto del sistema.
 * Permite opcionalmente guardar la salida en un archivo.
 */
public class VistaPorConsola {

    private PrintStream archivoOut = null;

    /**
     * Constructor por defecto: solo salida por consola.
     */
    public VistaPorConsola() {}

    /**
     * Constructor que permite especificar un archivo para guardar la salida.
     * @param rutaArchivo Ruta del archivo de salida.
     * @throws FileNotFoundException Si no se puede crear el archivo.
     */
    public VistaPorConsola(String rutaArchivo) throws FileNotFoundException {
        archivoOut = new PrintStream(rutaArchivo);
    }

    private void imprimir(String mensaje) {
        System.out.println(mensaje);
        if (archivoOut != null) archivoOut.println(mensaje);
    }

    private void imprimirError(String mensaje) {
        System.err.println(mensaje);
        if (archivoOut != null) archivoOut.println(mensaje);
    }

    private void imprimirf(String formato, Object... args) {
        System.out.printf(formato, args);
        if (archivoOut != null) archivoOut.printf(formato, args);
    }

    /**
     * Cierra el archivo de salida si est√° abierto.
     */
    public void cerrarArchivo() {
        if (archivoOut != null) archivoOut.close();
    }

    /**
     * Muestra el inicio de una nueva parada.
     * @param numeroParada N√∫mero de la parada actual.
     */
    public void mostrarInicioParada(final int numeroParada) {
        imprimir("\n=== PARADA " + numeroParada + " ===");
    }

    /**
     * Muestra el mensaje cuando un pasajero sube al colectivo.
     * @param p Pasajero que sube.
     */
    public void mostrarPasajeroSubio(final Pasajero p) {
        imprimir("üî∫ Pasajero " + p.getId() + " subi√≥");
    }

    /**
     * Muestra el mensaje cuando un pasajero baja del colectivo.
     * @param p Pasajero que baja.
     */
    public void mostrarPasajeroBajo(final Pasajero p) {
        imprimir("üîª Pasajero " + p.getId() + " baj√≥");
    }

    /**
     * Muestra el estado actual del colectivo despu√©s de una parada.
     * @param c Colectivo.
     * @param bajaron Cantidad de pasajeros que bajaron.
     * @param subieron Cantidad de pasajeros que subieron.
     */
    public void mostrarEstadoColectivo(final Colectivo c, final int bajaron, final int subieron) {
        imprimir("üë• Bajaron: " + bajaron + " | Subieron: " + subieron + " | A bordo: " + c.getCantidadPasajeros());
    }

    /**
     * Muestra la llegada de un colectivo a una parada.
     * @param c Colectivo.
     * @param p Parada a la que lleg√≥ el colectivo.
     */
    public void mostrarLlegadaColectivo(final Colectivo c, final Parada p) {
        imprimir("üöå L√≠nea " + c.getLinea().getCodigo() + " lleg√≥ a " + p.getDireccion());
    }

    /**
     * Muestra el mensaje de finalizaci√≥n de recorrido de un colectivo.
     * @param c Colectivo que finaliz√≥ su recorrido.
     */
    public void mostrarFinRecorrido(final Colectivo c) {
        imprimir("‚úÖ Colectivo de l√≠nea " + c.getLinea().getCodigo() + " finaliz√≥ su recorrido.");
    }

    /**
     * Muestra el mensaje de finalizaci√≥n de la simulaci√≥n.
     */
    public void mostrarFinSimulacion() {
        imprimir("\nüõë Simulaci√≥n finalizada.");
    }

    /**
     * Muestra una advertencia cuando una parada referenciada no se encuentra.
     * @param idParada ID de la parada no encontrada.
     */
    public void mostrarAdvertenciaParadaNoEncontrada(final int idParada) {
        imprimirError("‚ö†Ô∏è Parada no encontrada para ID: " + idParada);
    }

    /**
     * Muestra un mensaje cuando el colectivo est√° lleno y quedan pasajeros esperando.
     * @param c Colectivo.
     * @param p Parada.
     * @param cantidad Cantidad de pasajeros que quedaron esperando.
     */
    public void mostrarColectivoLlenoYPasajerosEsperando(final Colectivo c, final Parada p, final int cantidad) {
        imprimir("‚ö†Ô∏è Colectivo de l√≠nea " + c.getLinea().getCodigo() +
            " est√° lleno en " + p.getDireccion() +
            ". Quedaron " + cantidad + " pasajeros esperando.");
    }

    /**
     * Muestra el √≠ndice de satisfacci√≥n calculado al finalizar la simulaci√≥n.
     * @param indice Valor del √≠ndice de satisfacci√≥n (entre 0 y 1).
     */
    public void mostrarIndiceSatisfaccion(final double indice) {
        imprimirf("‚≠ê √çndice de satisfacci√≥n: %.2f%n", indice);
    }

    /**
     * Muestra el promedio de ocupaci√≥n de un colectivo durante la simulaci√≥n.
     * @param colectivo Colectivo del que se muestra la ocupaci√≥n.
     * @param promedio Valor promedio de ocupaci√≥n (entre 0 y 1).
     */
    public void mostrarOcupacionPromedio(final Colectivo colectivo, final double promedio) {
        imprimirf("üöè Colectivo %d (L√≠nea %s) - Ocupaci√≥n promedio: %.2f%n",
            colectivo.getId(), colectivo.getLinea().getCodigo(), promedio);
    }

    /**
     * Muestra una advertencia cuando el ID de una parada en el archivo de l√≠neas no es v√°lido.
     * @param idStr ID de parada no v√°lido como string.
     */
    public void mostrarAdvertenciaParadaNoValida(String idStr) {
        imprimirError("[!] ID de parada no v√°lido en archivo de l√≠neas: " + idStr);
    }

    /**
     * Crea una instancia de VistaPorConsola que guarda la salida en el archivo indicado.
     * Si ocurre un error, retorna una instancia que solo muestra por consola.
     * @param rutaArchivo Ruta del archivo de salida.
     * @return VistaPorConsola configurada.
     */
    public static VistaPorConsola crearConArchivo(String rutaArchivo) {
        try {
            return new VistaPorConsola(rutaArchivo);
        } catch (FileNotFoundException e) {
            System.err.println("No se pudo crear el archivo de salida en " + rutaArchivo + ", solo se mostrar√° por consola.");
            return new VistaPorConsola();
        }
    }

    public void mostrarEventosPasajeros(List<Pasajero> bajaron, List<Pasajero> subieron) {
        for (Pasajero p : bajaron) {
            mostrarPasajeroBajo(p);
        }
        for (Pasajero p : subieron) {
            mostrarPasajeroSubio(p);
        }
    }

    public void mostrarAdvertenciaColectivoLleno(Colectivo colectivo, Parada actual, int esperando) {
        if (esperando > 0) {
            mostrarColectivoLlenoYPasajerosEsperando(colectivo, actual, esperando);
        }
    }
}